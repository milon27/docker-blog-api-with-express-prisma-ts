{
    // https://snippet-generator.app/
    // Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console" // "$1 ${1/(.*)/${1:/upcase}/}  ->  ${1/(.*)/${1:/downcase}/}  ->  ${1/(.*)/${1:/capitalize}/}"
    // }
    "Test": {
        "prefix": "test",
        "body": [
            "$1 ->  ${1/(.*)/${1:/capitalize}/}"
        ],
        "description": "test output to console"
    },
    "Express Router": {
        "prefix": "eRouter",
        "body": [
            "import { Router } from \"express\";",
            "import $1Controller from \"../controllers/$1Controller\";",
            "",
            "const $1Router = Router()",
            "",
            "/**",
            " * @description get all ${1/(.*)/${1:/downcase}/} with paginate",
            " * @get http://localhost:2727/${1/(.*)/${1:/downcase}/}/",
            " */",
            "$1Router.get('/', $1Controller.getAllByPaginate)",
            "",
            "/**",
            " * @description get single ${1/(.*)/${1:/downcase}/}",
            " * @get http://localhost:2727/${1/(.*)/${1:/downcase}/}/:id",
            " */",
            "$1Router.get('/:id', $1Controller.getSingle$1)",
            "",
            "/**",
            " * @description create a new ${1/(.*)/${1:/downcase}/}",
            " * @post http://localhost:2727/${1/(.*)/${1:/downcase}/}/",
            " */",
            "$1Router.post('/', $1Controller.create$1)",
            "",
            "/**",
            " * @description update a ${1/(.*)/${1:/downcase}/}",
            " * @put http://localhost:2727/${1/(.*)/${1:/downcase}/}/:id",
            " */",
            "$1Router.put('/:id', $1Controller.update$1)",
            "",
            "/**",
            " * @description delete a ${1/(.*)/${1:/downcase}/}",
            " * @delete http://localhost:2727/${1/(.*)/${1:/downcase}/}/:id",
            " */",
            "$1Router.delete('/:id', $1Controller.delete$1)",
            "",
            "",
            "export default $1Router"
        ],
        "description": "Express Router"
    },
    "Express Controller Simple": {
        "prefix": "eConSimple",
        "body": [
            "import { Request, Response } from \"express\"",
            "",
            "const $1Controller = {",
            "    getAllByPaginate: async (req: Request, res: Response) => {",
            "",
            "    },",
            "    create$1: async (req: Request, res: Response) => {",
            "",
            "    },",
            "    update$1: async (req: Request, res: Response) => {",
            "",
            "    },",
            "    delete$1: async (req: Request, res: Response) => {",
            "",
            "    },",
            "}",
            "export default $1Controller"
        ],
        "description": "Express Controller"
    },
    "ExpressController": {
        "prefix": "eCon",
        "body": [
            "import { $1 } from \"@prisma/client\"",
            "import { Request, Response } from \"express\"",
            "import { $1Dto } from \"../models/dto/$1Dto\"",
            "import MyResponse from \"../models/MyResponse\"",
            "import Define from \"../utils/Define\"",
            "import Helper from \"../utils/Helper\"",
            "",
            "const $1Controller = {",
            "    getAllByPaginate: async (req: Request, res: Response) => {",
            "        try {",
            "            const page = req.query.page as string || \"1\"",
            "            const skip = (parseInt(page) - 1) * Define.PAGE_SIZE",
            "            if (isNaN(skip)) {",
            "                throw new Error(\"Enter Valid Page Number!\")",
            "            }",
            "            const count = await req.prisma.${1/(.*)/${1:/downcase}/}.count()",
            "            const list = await req.prisma.${1/(.*)/${1:/downcase}/}.findMany({",
            "                skip: skip,",
            "                take: Define.PAGE_SIZE,",
            "                orderBy: {",
            "                    createdAt: \"desc\"",
            "                }",
            "            })",
            "            res.status(200).json(MyResponse<$1[]>(false, \"get data successfully\", list,Math.ceil(count / Define.PAGE_SIZE)))",
            "        } catch (e) {",
            "            console.log(\"getAllByPaginate: \", e)",
            "            Helper.sendErrorResponse(res, e)",
            "        }",
            "    },",
            "    getSingle$1: async (req: Request, res: Response) => {",
            "        try {",
            "            const { id } = req.params",
            "",
            "            const ${1/(.*)/${1:/downcase}/} = await req.prisma.${1/(.*)/${1:/downcase}/}.findFirst({",
            "                where: {",
            "                    id: id",
            "                }",
            "            })",
            "            if (!${1/(.*)/${1:/downcase}/}) {",
            "                throw new Error(\"No $1 Found!\")",
            "            }",
            "            res.status(200).json(MyResponse<$1>(false, \"get data successfully\", ${1/(.*)/${1:/downcase}/}))",
            "        } catch (e) {",
            "            console.log(\"getSingle$1: \", e)",
            "            Helper.sendErrorResponse(res, e)",
            "        }",
            "    },",
            "    create$1: async (req: Request, res: Response) => {",
            "        try {",
            "            const { title, desc } = req.body as $1Dto",
            "            const ${1/(.*)/${1:/downcase}/} = await req.prisma.${1/(.*)/${1:/downcase}/}.create({",
            "                data: {",
            "                    title, desc",
            "                }",
            "            })",
            "            res.status(200).json(MyResponse<$1>(false, \"created successfully\", ${1/(.*)/${1:/downcase}/}))",
            "        } catch (e) {",
            "            console.log(\"create$1: \", e)",
            "            Helper.sendErrorResponse(res, e)",
            "        }",
            "    },",
            "    update$1: async (req: Request, res: Response) => {",
            "        try {",
            "            const { id } = req.params",
            "            const { title, desc } = req.body as Partial<$1Dto>",
            "            const ${1/(.*)/${1:/downcase}/} = await req.prisma.${1/(.*)/${1:/downcase}/}.update({",
            "                data: {",
            "                    title: title || undefined,",
            "                    desc: desc || undefined",
            "                },",
            "                where: {",
            "                    id: id",
            "                }",
            "            })",
            "            res.status(200).json(MyResponse<$1>(false, \"updated successfully\", ${1/(.*)/${1:/downcase}/}))",
            "        } catch (e) {",
            "            console.log(\"update$1: \", e)",
            "            Helper.sendErrorResponse(res, e)",
            "        }",
            "    },",
            "    delete$1: async (req: Request, res: Response) => {",
            "        try {",
            "            const { id } = req.params",
            "            const ${1/(.*)/${1:/downcase}/} = await req.prisma.${1/(.*)/${1:/downcase}/}.delete({",
            "                where: {",
            "                    id: id",
            "                }",
            "            })",
            "            res.status(200).json(MyResponse<$1>(false, \"deleted successfully\", ${1/(.*)/${1:/downcase}/}))",
            "        } catch (e) {",
            "            console.log(\"delete$1: \", e)",
            "            Helper.sendErrorResponse(res, e)",
            "        }",
            "    },",
            "}",
            "export default $1Controller"
        ],
        "description": "ExpressControoler"
    },
}